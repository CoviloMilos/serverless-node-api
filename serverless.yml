org: mcovilo
app: serverless-demo
service: serverless-demo
frameworkVersion: '3'

provider:
  name: aws
  deploymentMethod: direct # Direct deployments are daster and have no downsides
  stage: dev
  runtime: nodejs14.x
  # region: us-east-2 picked up from aws config
  tracing: # logs from both api gateway and lambdas
    apiGateway: true
    lambda: true
  # iamRoleStatements:
  #   - Effect: 'Allow'
  #     Action:
  #       - 'lambda:InvokeFunction'
  #     Resource:
  #       - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${opt:stage, self:provider.stage}-*
  # apiGateway
  # deploymentBucket S3
  # logs format, level, 

plugins:
  - serverless-plugin-warmup
  - serverless-offline
  - serverless-middleware
  - serverless-dotenv-plugin
  - serverless-api-gateway-caching

package:
  individually: true
  patterns:
    - "./load-test"

custom:
  warmup:
    default:
      enabled: true
      name: block-explorer
      events:
        - schedule: 'cron(0/5 8-17 ? * MON-FRI *)'
      prewarm: true
  serverless-offline:
    noPrependStageInUrl: true
    httpPort: 3000
    lambdaPort: 3001
  middleware:
    pre:
      - src/middlewares/pre-middleware.dbConnect
    # pos:
    #   - catch: src/middlewares/pos-middleware.errorHandler
  # apiGatewayCaching: # https://levelup.gitconnected.com/serverless-caching-strategies-part-1-amazon-api-gateway-c2d680d5b3b
  #   enabled: true
  #   clusterSize: '0.5' # 0.5GB (Gigabytes) The size of the cache cluster for the stage, if enabled.
  #   ttlInSeconds: 3600 # Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached
  #   perKeyInvalidation:
  #     requireAuthorization: false # default is true
  #     handleUnauthorizedRequests: Ignore # default is "IgnoreWithWarning".


functions:
  # express:
  #   name: ${sls:stage}-hello
  #   description: Used to say hello
  #   memorySize: 512
  #   handler: src/handlers/express.handler
  #   events:
  #     - httpApi: # Here we can expose API for hole resource. For example all /blocks endpoints
  #         path: /{proxy+}
  #         method: get
  #     - http: # Here we specify one endpoint
  #         path: /hello
  #         method: get
  #         cors:
  #           allowedOrigins:
  #             - http://example.com
  #             - http://example2.com
  #           allowedHeaders:
  #             - Content-Type
  #           allowedMethods:
  #             - GET
  #           allowCredentials: false
  
  health:
    name: ${sls:stage}-health
    description: Health check
    memorySize: 2048  # By default, your functions have 128 MB of memory allocated. Can be up to 10GB
    handler: src/handlers/block-handler.healthCheck
    events:
      - http:
          path: /health
          method: get


  plainSearch:
    name: ${sls:stage}-plain-search
    description: Plain search
    memorySize: 2048
    handler: src/handlers/search-handler.plainSearch
    events:
      - http:
          path: /search
          method: get
          caching:
            enabled: false # Caching needs to be enabled on all endpoints
          request:
            parameters:
              querystrings:
                q: true
    warmup: 
      default: 
        enabled: true
  getBlocksPaginated:
    name: ${sls:stage}-blocks-paginated
    description: Get blocks paginated
    memorySize: 2048
    handler: src/handlers/block-handler.getBlocksPaginated
    events:
      - http:
          path: /blocks-paginated
          method: get
          caching:
            enabled: false # Caching needs to be enabled on all endpoints
          request:
            parameters:
              querystrings:
                page: true
  getBlocks:
    name: ${sls:stage}-blocks
    description: Get blocks
    memorySize: 2048
    handler: src/handlers/block-handler.getBlocks
    events:
      - http:
          path: /blocks
          method: get
          
  getBlockByHash:
    name: ${sls:stage}-block-hash
    description: Get block by hash
    memorySize: 2048
    handler: src/handlers/block-handler.getBlockByHash
    events:
      - http:
          path: /blocks/{hash}
          method: get
          
  getTransactions:
    name: ${sls:stage}-transactions
    description: Get transactions
    memorySize: 2048
    handler: src/handlers/transaction-handler.getTransactions
    events:
      - http:
          path: /transactions
          method: get
          
  getTransactionByHash:
    name: ${sls:stage}-transaction-hash
    description: Get Transaction by hash
    memorySize: 2048
    handler: src/handlers/transaction-handler.getTransactionByHash
    events:
      - http:
          path: /transactions/{hash}
          method: get

  getTransactionsPaginated:
    name: ${sls:stage}-transactions-paginated
    description: Get transactions paginated
    memorySize: 2048
    handler: src/handlers/transaction-handler.getTransactionsPaginated
    events:
      - http:
          path: /transactions-paginated
          method: get
          caching:
            enabled: false # Caching needs to be enabled on all endpoints
          request:
            parameters:
              querystrings:
                page: true
          